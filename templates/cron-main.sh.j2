#!/bin/bash

# Exit with error code 1 if any command fails
set -e

# Output to stdout the message given, escaping its newlines and prefixing with date and loglevel
function log {
  LOGLEVEL=${LOGLEVEL:-INFO}
  ARGS="$@"
  echo "$(date --rfc-3339=ns) | $LOGLEVEL | ${ARGS//$'\n'/\\n}"
}

# Remove temporal directory
function clean {
  rm -rf "{{ backups_role_tmp_path }}"
}

# Runner that saves stderr and logs it if command fails
function run {

  set +e
  ERR_S=$(eval "$@" 2>&1 1>/dev/null)
  ERR_C=$?
  set -e

  if [ $ERR_C -ne 0 ]; then
    export LOGLEVEL="ERROR"
    log "$ERR_S"
    exit $ERR_C
  fi
}

# Set up an exit trap to delete temporal directory
#+ before exiting, even if there are errors.
trap clean EXIT

log "Create temporal directory"
run mkdir -p "{{ backups_role_tmp_path }}"

# Execute scripts in chain if error code is ok
{# Append and render script template to prepare backup #}
{% include backups_role_script_prepare_template %}

{# Append and render script template to upload backup #}
{% include "cron-upload.sh.j2" %}

log "Backup complete"
